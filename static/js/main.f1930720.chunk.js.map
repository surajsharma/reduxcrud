{"version":3,"sources":["Postform.js","Post.js","EditComponent.js","AllPost.js","App.js","serviceWorker.js","reducers/postReducer.js","index.js"],"names":["PostForm","handleSubmit","e","preventDefault","title","_this","getTitle","value","message","getMessage","data","id","Date","editing","props","dispatch","type","_this2","this","react_default","a","createElement","className","onSubmit","required","placeholder","ref","input","rows","cols","Component","connect","Post","post","onClick","EditComponent","handleEdit","newTitle","newMessage","key","defaultValue","AllPost","posts","map","src_EditComponent","src_Post","state","App","Postform","src_AllPost","Boolean","window","location","hostname","match","postReducer","arguments","length","undefined","action","concat","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1930720.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\nclass PostForm extends Component {\n   \n   handleSubmit = (e) => {\n    e.preventDefault();\n    const title = this.getTitle.value;\n    const message =  this.getMessage.value;\n    const data = {\n      id: new Date(),\n      title,\n      message,\n      editing: false\n    }\n\n    this.props.dispatch({\n      type:'ADD_POST',\n      data});\n    this.getTitle.value = '';\n    this.getMessage.value = '';    \n  }    \n\n  render() {\n        return (\n            <div className='post-container'>\n                <h1 className='post-heading'>Create Post</h1>\n                <form className='form' onSubmit = {this.handleSubmit}>\n                <input required type=\"text\" placeholder=\"Enter Post Title\" ref={(input)=>this.getTitle = input} /><br /><br />\n                <textarea required rows=\"5\" cols=\"28\" placeholder=\"Enter Post\" ref={(input)=>this.getMessage = input}/><br /><br />\n                <button>Post</button>\n                </form>\n            </div>\n            );\n    }\n}\nexport default connect()(PostForm);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\n\nclass Post extends Component {\n  render() {\n  return (\n    <div className=\"post\">\n      <h2 className='post_title'>{this.props.post.title}</h2>\n      <p className='post_message'>{this.props.post.message}</p>\n      <button className='edit'\n          onClick={()=>this.props.dispatch({type:'EDIT_POST',id:this.props.post.id})}\n        >\n        Edit</button>\n      <button className='delete'\n          onClick={()=>this.props.dispatch({type:'DELETE_POST',id:this.props.post.id})}\n        >\n        Delete</button>\n      \n    </div>\n  );\n }\n}\nexport default connect()(Post);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nclass EditComponent extends Component {\nhandleEdit = (e) => {\n  e.preventDefault();\n  const newTitle = this.getTitle.value;\n  const newMessage = this.getMessage.value;\n  const data = {\n    newTitle,\n    newMessage\n  }\n  this.props.dispatch({ type: 'UPDATE', id: this.props.post.id, data: data })\n}\nrender() {\nreturn (\n<div key={this.props.post.id} className='post'>\n  <form onSubmit={this.handleEdit} className='form'>\n    <input required type=\"text\" ref={(input) => this.getTitle = input}\n    defaultValue={this.props.post.title} placeholder=\"Enter Post Title\" /><br /><br />\n    <textarea required rows=\"5\" ref={(input) => this.getMessage = input}\n    defaultValue={this.props.post.message} cols=\"28\" placeholder=\"Enter Post\" /><br /><br />\n    <button>Update</button>\n  </form>\n</div>\n);\n}\n}\nexport default connect()(EditComponent);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Post from './Post';\nimport EditComponent from './EditComponent';\n\n\nclass AllPost extends Component {\n  render() {\n    return (\n    <div className='allposts'>\n      <h1 className='all-post-heading'>All Posts</h1>\n      {\n        this.props.posts.map((post)=> (\n          <div key = {post.id}>\n          {\n            post.editing ? <EditComponent post={post} key={post.id} /> :\n            <Post key={post.id} post={post}/>\n          }\n          </div>\n          ))}\n  </div>\n  );\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state\n    }\n}\n\nexport default connect(mapStateToProps)(AllPost);","import React, { Component } from 'react';\nimport Postform from './Postform';\nimport AllPost from './AllPost';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2 className=\"navbar\">REDUX CRUD DEMO</h2>\n        <div className=\"container\">\n            <Postform className=\"postform\"/>\n            <AllPost className=\"allpost\"/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const postReducer = (state = [], action) => {\n  switch(action.type) {\n    case 'ADD_POST':\n      return state.concat([action.data]);\n    case 'DELETE_POST':\n      return state.filter((post)=>post.id !== action.id);\n    case 'EDIT_POST':\n      return state.map((post)=>post.id === action.id ? {...post,editing:!post.editing}:post)\n    case 'UPDATE':\n      return state.map((post)=>{\n        if(post.id === action.id) {\n          return {\n             ...post,\n             title:action.data.newTitle,\n             message:action.data.newMessage,\n             editing: !post.editing\n          }\n        } else return post;\n      })\n    default:\n      return state;\n  }\n}\nexport default postReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport postReducer from './reducers/postReducer';\n\nconst store = createStore(postReducer);\n\nReactDOM.render(<Provider store = {store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}